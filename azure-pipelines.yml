trigger:
- main

pr:
  branches:
    include:
    - main
  paths:
    exclude:
    - 'docs/'
    - '/.*'
    - '/*.rst'
    - '/*.md'
    - '.github/'

jobs:

- job: Linux
  pool:
    name: Default
    demands:
    - CUDA_VERSION
    - Agent.OS -equals Linux
  strategy:
    matrix:
      Python310:
        python.version: '3.10'
      Python37:
        python.version: '3.7'
      Python39:
        python.version: '3.9'
    maxParallel: 4
  steps:

  - script: echo "CUDA version is $(CUDA_VERSION)"
    displayName: Print CUDA version

  - script: rm /home/azure/conda/envs/tike -rf
    displayName: Force remove previous environments

  - script: >
      mamba create --quiet --yes
      -n tike
      --channel conda-forge
      --file requirements.txt
      pytest
      python=$(python.version)
      cudatoolkit=$(CUDA_VERSION)
      "openmpi=*=h*"
      h5py
    displayName: Create build environment

  - script: conda list -n tike
    displayName: List build environment

  - script: |
      source activate tike
      pip install . --no-deps
    displayName: Setup and install

  - script: |
      source activate tike
      python tests/print-gpu-info.py
    displayName: Print GPU info

  - script: |
      source activate tike
      export TIKE_TEST_CI
      pytest -vs
    displayName: Run tests

  - task: PublishBuildArtifacts@1
    condition: eq(variables['python.version'], '3.9')
    inputs:
      pathToPublish: 'tests/result'
      artifactName: MonoGPU reconstructed images


- job: MultiLinux
  pool:
    name: Default
    demands:
    - MultiGPU
    - CUDA_VERSION
    - Agent.OS -equals Linux
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
    maxParallel: 4
  steps:

  - script: echo "CUDA version is $(CUDA_VERSION)"
    displayName: Print CUDA version

  - script: rm /home/azure/conda/envs/tike -rf
    displayName: Force remove previous environments

  - script: >
      mamba create --quiet --yes
      -n tike
      --channel conda-forge
      --file requirements.txt
      pytest
      python=$(python.version)
      cudatoolkit=$(CUDA_VERSION)
      h5py
    displayName: Create build environment

  - script: conda list -n tike
    displayName: List build environment

  - script: |
      source activate tike
      pip install . --no-deps
    displayName: Setup and install

  - script: |
      source activate tike
      python tests/print-gpu-info.py
    displayName: Print GPU info

  - script: |
      source activate tike
      export TIKE_TEST_CI
      pytest -vs
    displayName: Run tests

  - script: |
      source activate tike
      export OMPI_MCA_opal_cuda_support=true
      export TIKE_TEST_CI
      mpirun -n 2 pytest tests/test_comm.py -v
      mpirun -n 2 pytest tests/test_ptycho.py -k PtychoRecon -v
      mpirun -n 2 pytest tests/test_lamino.py -k bucket -v
    displayName: Run tests with MPI

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: 'tests/result'
      artifactName: MultiGPU reconstructed images
